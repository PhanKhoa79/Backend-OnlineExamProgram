/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-argument */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
import { Injectable } from '@nestjs/common';
import { UIChatResponseService } from './UI-chat-respone.service';
import { ExamScheduleService } from '../exam-schedule/exam-schedule.service';
import { ClassesService } from '../classes/classes.service';
import { SubjectService } from '../subject/subject.service';

@Injectable()
export class IntentChatResponseService extends UIChatResponseService {
  // === INTENT CONSTANTS FOR QUIZ WEBSITE ===
  static readonly WELCOME_INTENT = 'WelcomeIntent';
  static readonly FALLBACK_INTENT = 'FallbackIntent';
  static readonly GOODBYE_INTENT = 'GoodbyeIntent';

  static readonly GET_EXAM_SCHEDULE_INTENT = 'GetExamScheduleIntent';
  static readonly PROVIDE_EXAM_SCHEDULE_DETAILS_INTENT =
    'ProvideExamScheduleDetailsIntent';
  static readonly GET_EXAM_INFO_INTENT = 'GetExamInfoIntent';
  static readonly GET_EXAM_DURATION_INTENT = 'GetExamDurationIntent';
  static readonly GET_EXAM_QUESTIONS_INTENT = 'GetExamQuestionsIntent';
  static readonly GET_EXAM_SUBJECTS_INTENT = 'GetExamSubjectsIntent';
  static readonly GET_EXAM_ROOMS_INTENT = 'GetExamRoomsIntent';

  static readonly CHECK_EXAM_RESULT_INTENT = 'CheckExamResultIntent';
  static readonly GET_RESULT_DETAILS_INTENT = 'GetResultDetailsIntent';
  static readonly GET_SCORE_BREAKDOWN_INTENT = 'GetScoreBreakdownIntent';
  static readonly GET_RESULT_HISTORY_INTENT = 'GetResultHistoryIntent';
  static readonly GET_PASSING_SCORE_INTENT = 'GetPassingScoreIntent';

  constructor(
    private readonly examScheduleService: ExamScheduleService,
    private readonly classService: ClassesService,
    private readonly subjectService: SubjectService,
  ) {
    super();
  }

  // === BASIC INTENTS ===
  getWelcomeIntentResponse(): any {
    return {
      fulfillmentMessages: [
        this.getTextResponseComponent([
          `Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa website thi tr·∫Øc nghi·ªám. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? üëã`,
        ]),
        {
          payload: {
            richContent: [
              [
                this.getSuggestionChipResponseComponent([
                  { text: 'Xem l·ªãch thi üìÖ' },
                  { text: 'Th√¥ng tin b√†i thi üìã' },
                  { text: 'K·∫øt qu·∫£ thi üèÜ' },
                  { text: 'C·∫•u tr√∫c ƒë·ªÅ thi üìù' },
                  { text: 'M√¥n thi üìö' },
                  { text: 'Ph√≤ng thi üè´' },
                ]),
              ],
            ],
          },
        },
      ],
    };
  }

  getFallbackIntentResponse(): any {
    return {
      fulfillmentMessages: [
        this.getTextResponseComponent([
          'Xin l·ªói, t√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ l·ªãch thi, th√¥ng tin b√†i thi, ho·∫∑c k·∫øt qu·∫£ thi.',
        ]),
      ],
    };
  }

  getGoodbyeIntentResponse(): any {
    return {
      fulfillmentMessages: [
        this.getTextResponseComponent([
          'Ch√∫c b·∫°n thi t·ªët! H·∫πn g·∫∑p l·∫°i b·∫°n! üòä',
        ]),
      ],
    };
  }

  // === EXAM INFO INTENTS ===
  async getExamScheduleIntentResponse(
    queryResult: any,
    outputContextName?: string,
  ): Promise<any> {
    const { parameters } = queryResult;
    const classCode = parameters?.classCode || '';
    const subjectName = parameters?.subjectName || '';

    if (!classCode || !subjectName) {
      const sessionId =
        queryResult.session?.split('/').pop() || 'default-session';
      const projectId = 'mychatbot-volx';
      const fullContextName = `projects/${projectId}/agent/sessions/${sessionId}/contexts/${outputContextName?.replace('/', '') || 'examschedule'}`;

      return {
        fulfillmentMessages: [
          this.getTextResponseComponent([
            'B·∫°n vui l√≤ng cung c·∫•p th√™m m√£ l·ªõp, m√¥n h·ªçc ƒë·ªÉ t√¥i c√≥ th·ªÉ t√¨m l·ªãch thi cho b·∫°n.',
          ]),
          {
            payload: {
              richContent: [
                [
                  {
                    type: 'list',
                    title: 'B·∫°n c√≥ th·ªÉ nh·∫≠p theo d·∫°ng:',
                    items: [
                      { text: '‚û§: M√£ l·ªõp l√† ABC, m√¥n l√† To√°n' },
                      { text: '‚û§: ABC - To√°n' },
                      { text: '‚û§: L·ªõp ABC, m√¥n To√°n' },
                      { text: '‚û§: ABC, To√°n' },
                    ],
                  },
                ],
              ],
            },
          },
        ],
        outputContexts: outputContextName
          ? [{ name: fullContextName, lifespanCount: 1 }]
          : [],
      };
    }

    try {
      const classEntity = await this.classService.findByCodeOrName(classCode);
      if (!classEntity) {
        return {
          fulfillmentMessages: [
            this.getTextResponseComponent([
              `Kh√¥ng t√¨m th·∫•y l·ªõp v·ªõi m√£/t√™n "${classCode}". Vui l√≤ng ki·ªÉm tra l·∫°i.`,
            ]),
          ],
        };
      }

      const subject = await this.subjectService.findByCodeOrName(subjectName);
      if (!subject) {
        return {
          fulfillmentMessages: [
            this.getTextResponseComponent([
              `Kh√¥ng t√¨m th·∫•y m√¥n h·ªçc v·ªõi m√£/t√™n "${subjectName}". Vui l√≤ng ki·ªÉm tra l·∫°i.`,
            ]),
          ],
        };
      }

      const today = new Date(); // 04:44 PM +07, 30/07/2025
      const startOfDay = new Date(today.setHours(0, 0, 0, 0));

      const schedules =
        await this.examScheduleService.findByClassAndSubjectToday(
          classEntity.id,
          subject.id,
          startOfDay,
        );

      if (!schedules || schedules.length === 0) {
        return {
          fulfillmentMessages: [
            this.getTextResponseComponent([
              'Hi·ªán t·∫°i ch∆∞a c√≥ l·ªãch thi n√†o t∆∞∆°ng ·ª©ng v·ªõi th√¥ng tin b·∫°n cung c·∫•p.',
            ]),
          ],
        };
      }

      const scheduleList = schedules
        .map(
          (schedule) =>
            `${schedule.startTime.toLocaleString('vi-VN')} ƒë·∫øn ${schedule.endTime.toLocaleString('vi-VN')}`,
        )
        .join('\n');

      return {
        fulfillmentMessages: [
          this.getTextResponseComponent([
            `B·∫°n c√≥ l·ªãch thi m√¥n ${subject.name}`,
            `M√£ l·ªãch thi: ${schedules[0].code}`,
            'Th·ªùi gian:',
            scheduleList,
          ]),
        ],
      };
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
    } catch (error) {
      return {
        fulfillmentMessages: [
          this.getTextResponseComponent([
            'C√≥ l·ªói x·∫£y ra khi t√¨m l·ªãch thi. Vui l√≤ng th·ª≠ l·∫°i sau.',
          ]),
        ],
      };
    }
  }

  async getProvideExamScheduleDetailsResponse(queryResult: any): Promise<any> {
    return await this.getExamScheduleIntentResponse(queryResult);
  }

  getExamInfoIntentResponse(params: Record<string, any> = {}): any {
    return {
      fulfillmentMessages: [
        this.getTextResponseComponent([
          'B·∫°n mu·ªën xem th√¥ng tin chi ti·∫øt b√†i thi n√†o? T√¥i c√≥ th·ªÉ cung c·∫•p th√¥ng tin v·ªÅ c·∫•u tr√∫c ƒë·ªÅ thi, th·ªùi gian l√†m b√†i, s·ªë c√¢u h·ªèi.',
        ]),
      ],
    };
  }

  getExamDurationIntentResponse(params: Record<string, any> = {}): any {
    return {
      fulfillmentMessages: [
        this.getTextResponseComponent([
          'Th·ªùi gian l√†m b√†i thi th∆∞·ªùng l√† 60 ph√∫t. B·∫°n mu·ªën h·ªèi v·ªÅ b√†i thi n√†o c·ª• th·ªÉ kh√¥ng?',
        ]),
      ],
    };
  }

  getExamQuestionsIntentResponse(params: Record<string, any> = {}): any {
    return {
      fulfillmentMessages: [
        this.getTextResponseComponent([
          'M·ªôt ƒë·ªÅ thi th∆∞·ªùng c√≥ 40 c√¢u h·ªèi tr·∫Øc nghi·ªám. B·∫°n mu·ªën bi·∫øt v·ªÅ c·∫•u tr√∫c ƒë·ªÅ thi m√¥n n√†o?',
        ]),
      ],
    };
  }

  getExamSubjectsIntentResponse(params: Record<string, any> = {}): any {
    return {
      fulfillmentMessages: [
        this.getTextResponseComponent([
          'C√°c m√¥n thi bao g·ªìm: To√°n, VƒÉn, L√Ω, H√≥a, Sinh, Anh, S·ª≠, ƒê·ªãa. B·∫°n mu·ªën xem l·ªãch thi ho·∫∑c ƒë·ªÅ thi m√¥n n√†o?',
        ]),
      ],
    };
  }

  getExamRoomsIntentResponse(params: Record<string, any> = {}): any {
    return {
      fulfillmentMessages: [
        this.getTextResponseComponent([
          'B·∫°n mu·ªën bi·∫øt th√¥ng tin ph√≤ng thi c·ªßa m√¥n n√†o? Vui l√≤ng cung c·∫•p m√£ sinh vi√™n ho·∫∑c m√£ b√†i thi.',
        ]),
      ],
    };
  }

  // === EXAM RESULT INTENTS ===
  getCheckExamResultIntentResponse(params: Record<string, any> = {}): any {
    const { student_id, exam_code } = params;

    if (!student_id || student_id === '---') {
      return {
        fulfillmentMessages: [
          this.getTextResponseComponent([
            'B·∫°n mu·ªën xem k·∫øt qu·∫£ b√†i thi n√†o? Vui l√≤ng cung c·∫•p m√£ sinh vi√™n ho·∫∑c m√£ b√†i thi.',
          ]),
        ],
      };
    }

    // Logic ƒë·ªÉ l·∫•y k·∫øt qu·∫£ thi theo student_id v√† exam_code
    return {
      fulfillmentMessages: [
        this.getTextResponseComponent([
          `ƒêang t√¨m k·∫øt qu·∫£ thi cho sinh vi√™n ${student_id}${exam_code !== '---' ? ` - M√£ b√†i thi: ${exam_code}` : ''}...`,
        ]),
      ],
    };
  }

  public getErrorIntentResponse(errorMessage: string | null = null): any {
    const message = errorMessage || 'ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i.';
    return {
      fulfillmentMessages: [this.getTextResponseComponent([message])],
    };
  }
}
