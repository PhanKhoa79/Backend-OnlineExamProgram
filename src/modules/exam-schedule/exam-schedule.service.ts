import {
  Injectable,
  NotFoundException,
  BadRequestException,
  Inject,
  forwardRef,
} from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, In } from 'typeorm';
import { ExamSchedule } from '../../database/entities/ExamSchedule';
import { ExamScheduleAssignments } from '../../database/entities/ExamScheduleAssignments';
import { Classes } from '../../database/entities/Classes';
import { CreateExamScheduleDto } from './dto/create-exam-schedule.dto';
import { UpdateExamScheduleDto } from './dto/update-exam-schedule.dto';
import { NotificationService } from '../notification/notification.service';

@Injectable()
export class ExamScheduleService {
  constructor(
    @InjectRepository(ExamSchedule)
    private readonly examScheduleRepo: Repository<ExamSchedule>,
    @InjectRepository(ExamScheduleAssignments)
    private readonly examScheduleAssignmentRepo: Repository<ExamScheduleAssignments>,
    @InjectRepository(Classes)
    private readonly classesRepo: Repository<Classes>,
    @Inject(forwardRef(() => NotificationService))
    private readonly notificationService: NotificationService,
  ) {}

  // üîç Helper method: Ki·ªÉm tra m√£ l·ªãch thi ƒë√£ t·ªìn t·∫°i
  private async validateUniqueCode(
    code: string,
    excludeId?: number,
  ): Promise<void> {
    const existingSchedule = await this.examScheduleRepo.findOne({
      where: { code },
    });

    if (existingSchedule && (!excludeId || existingSchedule.id !== excludeId)) {
      throw new BadRequestException(
        `M√£ l·ªãch thi "${code}" ƒë√£ t·ªìn t·∫°i. Vui l√≤ng s·ª≠ d·ª•ng m√£ kh√°c.`,
      );
    }
  }

  async create(createDto: CreateExamScheduleDto): Promise<ExamSchedule> {
    // üîç KI·ªÇM TRA: M√£ l·ªãch thi ƒë√£ t·ªìn t·∫°i ch∆∞a
    await this.validateUniqueCode(createDto.code);

    // Validate th·ªùi gian
    const startTime = new Date(createDto.startTime);
    const endTime = new Date(createDto.endTime);

    if (startTime >= endTime) {
      throw new BadRequestException(
        'Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n th·ªùi gian k·∫øt th√∫c',
      );
    }

    if (startTime < new Date()) {
      throw new BadRequestException('Th·ªùi gian b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ ·ªü qu√° kh·ª©');
    }

    // T·∫°o l·ªãch thi
    const examSchedule = this.examScheduleRepo.create({
      ...createDto,
      startTime,
      endTime,
      subject: { id: createDto.subjectId },
    });

    // L∆∞u l·ªãch thi
    const savedExamSchedule = await this.examScheduleRepo.save(examSchedule);

    // N·∫øu c√≥ danh s√°ch l·ªõp h·ªçc, li√™n k·∫øt ch√∫ng v·ªõi l·ªãch thi
    if (createDto.classIds && createDto.classIds.length > 0) {
      // Ki·ªÉm tra c√°c l·ªõp h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
      const classes = await this.classesRepo.find({
        where: { id: In(createDto.classIds) },
      });

      if (classes.length !== createDto.classIds.length) {
        throw new BadRequestException('M·ªôt s·ªë l·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i');
      }

      // Li√™n k·∫øt l·ªõp h·ªçc v·ªõi l·ªãch thi
      savedExamSchedule.classes = classes;
      await this.examScheduleRepo.save(savedExamSchedule);

      // L·∫•y ƒë·∫ßy ƒë·ªß th√¥ng tin l·ªãch thi bao g·ªìm subject ƒë·ªÉ g·ª≠i th√¥ng b√°o
      const fullExamSchedule = await this.examScheduleRepo.findOne({
        where: { id: savedExamSchedule.id },
        relations: ['subject', 'classes'],
      });

      // G·ª≠i th√¥ng b√°o ƒë·∫øn sinh vi√™n c·ªßa c√°c l·ªõp h·ªçc
      try {
        if (fullExamSchedule) {
          await this.notificationService.createExamScheduleNotification(
            fullExamSchedule,
          );
        }
      } catch (error) {
        console.error('L·ªói khi g·ª≠i th√¥ng b√°o l·ªãch thi:', error);
        // Kh√¥ng throw l·ªói ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác t·∫°o l·ªãch thi
      }
    }

    return savedExamSchedule;
  }

  async findAll(): Promise<ExamSchedule[]> {
    return await this.examScheduleRepo.find({
      relations: ['subject', 'examScheduleAssignments', 'classes'],
      order: { createdAt: 'DESC' },
    });
  }

  async findOne(id: number): Promise<ExamSchedule> {
    const examSchedule = await this.examScheduleRepo.findOne({
      where: { id },
      relations: [
        'subject',
        'examScheduleAssignments',
        'examScheduleAssignments.class',
        'classes',
      ],
    });

    if (!examSchedule) {
      throw new NotFoundException(`Kh√¥ng t√¨m th·∫•y l·ªãch thi v·ªõi ID ${id}`);
    }

    return examSchedule;
  }

  async update(
    id: number,
    updateDto: UpdateExamScheduleDto,
  ): Promise<ExamSchedule> {
    const examSchedule = await this.findOne(id);

    // üîç KI·ªÇM TRA: M√£ l·ªãch thi ƒë√£ t·ªìn t·∫°i ch∆∞a (n·∫øu c√≥ thay ƒë·ªïi code)
    if (updateDto.code && updateDto.code !== examSchedule.code) {
      await this.validateUniqueCode(updateDto.code, id);
    }

    // Ki·ªÉm tra c√≥ l·ªõp ƒëang thi kh√¥ng
    const activeAssignments = await this.examScheduleAssignmentRepo.find({
      where: {
        examSchedule: { id },
        status: 'open',
      },
      relations: ['class'],
    });

    if (activeAssignments.length > 0) {
      const classNames = activeAssignments.map((a) => a.class?.name).join(', ');
      throw new BadRequestException(
        `Kh√¥ng th·ªÉ s·ª≠a l·ªãch thi khi c√≥ l·ªõp ƒëang thi: ${classNames}`,
      );
    }

    // Validate th·ªùi gian n·∫øu c√≥ thay ƒë·ªïi
    if (updateDto.startTime || updateDto.endTime) {
      const startTime = updateDto.startTime
        ? new Date(updateDto.startTime)
        : examSchedule.startTime;
      const endTime = updateDto.endTime
        ? new Date(updateDto.endTime)
        : examSchedule.endTime;

      if (startTime >= endTime) {
        throw new BadRequestException(
          'Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n th·ªùi gian k·∫øt th√∫c',
        );
      }

      if (
        updateDto.startTime &&
        examSchedule.status !== 'completed' &&
        startTime < new Date()
      ) {
        throw new BadRequestException('Th·ªùi gian b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ ·ªü qu√° kh·ª©');
      }
    }

    // C·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n
    Object.assign(examSchedule, updateDto);

    if (updateDto.subjectId) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      examSchedule.subject = { id: updateDto.subjectId } as any;
    }

    // C·∫≠p nh·∫≠t danh s√°ch l·ªõp h·ªçc n·∫øu c√≥
    if (updateDto.classIds) {
      // Ki·ªÉm tra c√°c l·ªõp h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
      const classes = await this.classesRepo.find({
        where: { id: In(updateDto.classIds) },
      });

      if (classes.length !== updateDto.classIds.length) {
        throw new BadRequestException('M·ªôt s·ªë l·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i');
      }

      // C·∫≠p nh·∫≠t li√™n k·∫øt v·ªõi l·ªõp h·ªçc
      examSchedule.classes = classes;

      // L∆∞u l·ªãch thi
      const updatedExamSchedule =
        await this.examScheduleRepo.save(examSchedule);

      // L·∫•y ƒë·∫ßy ƒë·ªß th√¥ng tin l·ªãch thi bao g·ªìm subject ƒë·ªÉ g·ª≠i th√¥ng b√°o
      const fullExamSchedule = await this.examScheduleRepo.findOne({
        where: { id: updatedExamSchedule.id },
        relations: ['subject', 'classes'],
      });

      // G·ª≠i th√¥ng b√°o ƒë·∫øn sinh vi√™n c·ªßa c√°c l·ªõp h·ªçc
      try {
        if (fullExamSchedule) {
          await this.notificationService.createExamScheduleNotification(
            fullExamSchedule,
          );
        }
      } catch (error) {
        console.error('L·ªói khi g·ª≠i th√¥ng b√°o l·ªãch thi:', error);
        // Kh√¥ng throw l·ªói ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác c·∫≠p nh·∫≠t l·ªãch thi
      }

      return updatedExamSchedule;
    }

    return await this.examScheduleRepo.save(examSchedule);
  }

  async remove(id: number): Promise<void> {
    const examSchedule = await this.findOne(id);

    // Ki·ªÉm tra c√≥ assignment ƒëang ho·∫°t ƒë·ªông kh√¥ng
    const activeAssignments = await this.examScheduleAssignmentRepo.find({
      where: {
        examSchedule: { id },
        status: In(['waiting', 'open']),
      },
    });

    if (activeAssignments.length > 0) {
      throw new BadRequestException(
        `Kh√¥ng th·ªÉ x√≥a l·ªãch thi khi c√≥ ${activeAssignments.length} ph√≤ng thi ƒëang ho·∫°t ƒë·ªông`,
      );
    }

    await this.examScheduleRepo.remove(examSchedule);
  }

  @Cron(CronExpression.EVERY_MINUTE)
  async updateScheduleStatus(): Promise<void> {
    const now = new Date();

    // T√¨m t·∫•t c·∫£ l·ªãch thi active ƒë√£ k·∫øt th√∫c
    const expiredSchedules = await this.examScheduleRepo
      .createQueryBuilder('schedule')
      .leftJoinAndSelect('schedule.examScheduleAssignments', 'assignments')
      .where('schedule.status = :status', { status: 'active' })
      .andWhere('schedule.endTime < :now', { now })
      .getMany();

    if (expiredSchedules.length === 0) {
      return; // Kh√¥ng c√≥ l·ªãch thi n√†o c·∫ßn c·∫≠p nh·∫≠t
    }

    for (const schedule of expiredSchedules) {
      // Ki·ªÉm tra t·∫•t c·∫£ assignments ƒë√£ closed ch∆∞a
      const hasOpenAssignments = schedule.examScheduleAssignments?.some(
        (assignment) =>
          assignment.status === 'open' || assignment.status === 'waiting',
      );

      // Ch·ªâ chuy·ªÉn sang completed n·∫øu t·∫•t c·∫£ assignments ƒë√£ closed
      if (!hasOpenAssignments) {
        await this.examScheduleRepo.update(schedule.id, {
          status: 'completed',
        });
        console.log(
          `üìã Schedule ${schedule.code} ‚Üí completed (all assignments closed)`,
        );
      } else {
        console.log(
          `‚è≥ Schedule ${schedule.code} still has active assignments`,
        );
      }
    }
  }

  // L·∫•y l·ªãch thi theo tr·∫°ng th√°i
  async findByStatus(
    status: 'active' | 'completed' | 'cancelled',
  ): Promise<ExamSchedule[]> {
    return await this.examScheduleRepo.find({
      where: { status },
      relations: ['subject', 'examScheduleAssignments'],
      order: { startTime: 'ASC' },
    });
  }

  // L·∫•y l·ªãch thi trong kho·∫£ng th·ªùi gian
  async findByDateRange(
    startDate: Date,
    endDate: Date,
  ): Promise<ExamSchedule[]> {
    return await this.examScheduleRepo
      .createQueryBuilder('schedule')
      .leftJoinAndSelect('schedule.subject', 'subject')
      .leftJoinAndSelect('schedule.examScheduleAssignments', 'assignments')
      .where('schedule.startTime >= :startDate', { startDate })
      .andWhere('schedule.endTime <= :endDate', { endDate })
      .orderBy('schedule.startTime', 'ASC')
      .getMany();
  }

  // H·ªßy l·ªãch thi
  async cancelSchedule(id: number, reason?: string): Promise<ExamSchedule> {
    const examSchedule = await this.findOne(id);

    // Ki·ªÉm tra kh√¥ng c√≥ assignment n√†o ƒëang 'open'
    const openAssignments = await this.examScheduleAssignmentRepo.find({
      where: {
        examSchedule: { id },
        status: 'open',
      },
      relations: ['class'],
    });

    if (openAssignments.length > 0) {
      const classNames = openAssignments.map((a) => a.class?.name).join(', ');
      throw new BadRequestException(
        `Kh√¥ng th·ªÉ h·ªßy l·ªãch thi khi c√≥ l·ªõp ƒëang thi: ${classNames}`,
      );
    }

    // Chuy·ªÉn t·∫•t c·∫£ assignments v·ªÅ 'closed'
    await this.examScheduleAssignmentRepo.update(
      { examSchedule: { id } },
      { status: 'closed' },
    );

    // Update status sang cancelled
    examSchedule.status = 'cancelled';
    if (reason) {
      examSchedule.description = `[H·ª¶Y] L√Ω do: ${reason}`;
    }

    console.log(
      `‚ùå Schedule ${examSchedule.code} cancelled: ${reason || 'No reason'}`,
    );

    return await this.examScheduleRepo.save(examSchedule);
  }

  // L·∫•y l·ªãch thi theo l·ªõp h·ªçc
  async findByClassId(classId: number): Promise<ExamSchedule[]> {
    // S·ª≠ d·ª•ng queryBuilder ƒë·ªÉ t√¨m l·ªãch thi li√™n k·∫øt v·ªõi l·ªõp h·ªçc
    const schedules = await this.examScheduleRepo
      .createQueryBuilder('schedule')
      .leftJoinAndSelect('schedule.subject', 'subject')
      .leftJoinAndSelect('schedule.classes', 'classes')
      .where('classes.id = :classId', { classId })
      .orderBy('schedule.startTime', 'DESC')
      .getMany();

    return schedules;
  }

  // L·∫•y danh s√°ch c√°c l·ªõp h·ªçc theo l·ªãch thi
  async getClassesByScheduleId(scheduleId: number): Promise<Classes[]> {
    const examSchedule = await this.examScheduleRepo.findOne({
      where: { id: scheduleId },
      relations: ['classes'],
    });

    if (!examSchedule) {
      throw new NotFoundException(
        `Kh√¥ng t√¨m th·∫•y l·ªãch thi v·ªõi ID ${scheduleId}`,
      );
    }

    return examSchedule.classes;
  }

  // L·∫•y l·ªãch thi theo l·ªõp v√† m√¥n h·ªçc trong ng√†y hi·ªán t·∫°i
  async findByClassAndSubjectToday(
    classId: number,
    subjectId: number,
    startOfDay: Date,
  ): Promise<ExamSchedule[]> {
    return await this.examScheduleRepo
      .createQueryBuilder('schedule')
      .leftJoinAndSelect('schedule.subject', 'subject')
      .leftJoinAndSelect('schedule.classes', 'classes')
      .where('classes.id = :classId', { classId })
      .andWhere('schedule.subject.id = :subjectId', { subjectId })
      .andWhere('schedule.startTime >= :startOfDay', { startOfDay })
      .andWhere('schedule.status = :status', { status: 'active' })
      .orderBy('schedule.startTime', 'ASC')
      .getMany();
  }
}
