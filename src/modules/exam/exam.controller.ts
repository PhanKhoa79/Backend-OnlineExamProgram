import {
  Body,
  Controller,
  Delete,
  Get,
  Param,
  ParseIntPipe,
  Post,
  Put,
  UseGuards,
  Query,
  Res,
} from '@nestjs/common';
import { Response } from 'express';
import { ExamService } from './exam.service';
import { CreateExamDto } from './dto/create-exam.dto';
import { UpdateExamDto } from './dto/update-exam.dto';
import { StartExamDto, SaveStudentAnswerDto } from './dto/student-answer.dto';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { PermissionsGuard } from '../auth/permissions.guard';
import { Permissions } from '../auth/decorator/permissions.decotator';
import { ActivityLog } from '../../common/decorators/activity-log.decorator';

@Controller('exam')
export class ExamController {
  constructor(private readonly examService: ExamService) {}

  @Post()
  @UseGuards(JwtAuthGuard, PermissionsGuard)
  @Permissions('exam:create')
  @ActivityLog({ action: 'CREATE', module: 'exam' })
  async createExam(@Body() createExamDto: CreateExamDto) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.createExam(createExamDto);
  }

  @Put(':id')
  @UseGuards(JwtAuthGuard, PermissionsGuard)
  @Permissions('exam:update')
  @ActivityLog({ action: 'UPDATE', module: 'exam' })
  async updateExam(
    @Param('id', ParseIntPipe) id: number,
    @Body() updateExamDto: UpdateExamDto,
  ) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.updateExam(id, updateExamDto);
  }

  @Delete(':id')
  @UseGuards(JwtAuthGuard, PermissionsGuard)
  @Permissions('exam:delete')
  @ActivityLog({ action: 'DELETE', module: 'exam' })
  async deleteExam(@Param('id', ParseIntPipe) id: number) {
    // L·∫•y th√¥ng tin ƒë·ªÅ thi tr∆∞·ªõc khi x√≥a
    const exam = await this.examService.getExamById(id);

    // Th·ª±c hi·ªán x√≥a
    await this.examService.deleteExam(id);

    return {
      message: 'Xo√° ƒë·ªÅ thi th√†nh c√¥ng',
      data: exam, // Tr·∫£ v·ªÅ th√¥ng tin ƒë·ªÅ thi ƒë√£ x√≥a
    };
  }

  @Post(':id/export')
  @UseGuards(JwtAuthGuard, PermissionsGuard)
  @Permissions('exam:view')
  @ActivityLog({
    action: 'EXPORT',
    module: 'exam',
    description: 'ƒë√£ export ƒë·ªÅ thi',
  })
  async exportExam(
    @Param('id', ParseIntPipe) id: number,
    @Query('format') format: 'excel' | 'csv' = 'excel',
    @Res() res: Response,
  ) {
    const result = await this.examService.exportExamWithQuestions(id, format);

    res.setHeader('Content-Type', result.contentType);
    res.setHeader(
      'Content-Disposition',
      `attachment; filename="${result.filename}"`,
    );
    res.send(result.buffer);
  }

  @Get(':id')
  @UseGuards(JwtAuthGuard)
  async getExamById(@Param('id', ParseIntPipe) id: number) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.getExamById(id);
  }

  @Get()
  @UseGuards(JwtAuthGuard)
  async getAllExams() {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.getAllExams();
  }

  @Get(':id/questions')
  @UseGuards(JwtAuthGuard)
  async getQuestionsOfExam(@Param('id', ParseIntPipe) id: number) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.getQuestionsOfExam(id);
  }

  // üî• TH√äM: Endpoint m·ªõi cho student l·∫•y c√¢u h·ªèi v·ªõi randomization
  @Get(':id/questions/student/:assignmentId')
  @UseGuards(JwtAuthGuard)
  async getQuestionsForStudent(
    @Param('id', ParseIntPipe) examId: number,
    @Param('assignmentId', ParseIntPipe) assignmentId: number,
    @Query('studentId', ParseIntPipe) studentId?: number,
  ) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.getQuestionsForStudent(
      examId,
      assignmentId,
      studentId,
    );
  }

  @Get('subject/:subjectId')
  @UseGuards(JwtAuthGuard)
  async getExamsBySubject(@Param('subjectId') subjectId: string) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.getExamsBySubject(+subjectId);
  }

  @Get('type/:examType')
  @UseGuards(JwtAuthGuard)
  async getExamsByType(@Param('examType') examType: 'practice' | 'official') {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.getExamsByType(examType);
  }

  @Get('practice-progress/:studentId')
  @UseGuards(JwtAuthGuard)
  async getStudentPracticeProgress(
    @Param('studentId', ParseIntPipe) studentId: number,
  ) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.getStudentPracticeProgress(studentId);
  }

  @Post('student-exam/:studentExamId/submit')
  @UseGuards(JwtAuthGuard)
  @ActivityLog({ action: 'SUBMIT', module: 'exam' })
  async submitStudentExam(
    @Param('studentExamId', ParseIntPipe) studentExamId: number,
  ) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.submitStudentExam(studentExamId);
  }

  @Get('student-exam/:studentExamId/score')
  @UseGuards(JwtAuthGuard)
  async calculateStudentScore(
    @Param('studentExamId', ParseIntPipe) studentExamId: number,
  ) {
    const score = await this.examService.calculateStudentScore(studentExamId);
    return { score };
  }

  // üî• TH√äM: API cho vi·ªác b·∫Øt ƒë·∫ßu l√†m b√†i thi
  @Post('start')
  @UseGuards(JwtAuthGuard)
  @ActivityLog({ action: 'START_EXAM', module: 'exam' })
  async startExam(@Body() startExamDto: StartExamDto) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.startExam(startExamDto);
  }

  // üî• API ƒë·ªÉ l∆∞u/c·∫≠p nh·∫≠t c√¢u tr·∫£ l·ªùi (UPSERT operation)
  @Post('answer')
  @UseGuards(JwtAuthGuard)
  async saveStudentAnswer(@Body() saveAnswerDto: SaveStudentAnswerDto) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.saveStudentAnswer(saveAnswerDto);
  }

  // üî• API ƒë·ªÉ l·∫•y t·∫•t c·∫£ c√¢u tr·∫£ l·ªùi c·ªßa m·ªôt b√†i thi
  @Get('student-exam/:studentExamId/answers')
  @UseGuards(JwtAuthGuard)
  async getStudentAnswers(
    @Param('studentExamId', ParseIntPipe) studentExamId: number,
  ) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.getStudentAnswers(studentExamId);
  }
  // üî• TH√äM: API l·∫•y ƒë·ªÅ thi practice ƒëang l√†m d·ªü
  @Get('in-progress-practice/:studentId')
  @UseGuards(JwtAuthGuard)
  async getInProgressPracticeExams(
    @Param('studentId', ParseIntPipe) studentId: number,
  ) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.getInProgressPracticeExams(studentId);
  }

  // üî• TH√äM: API l·∫•y ƒë·ªÅ thi practice ƒë√£ ho√†n th√†nh
  @Get('completed-practice/:studentId')
  @UseGuards(JwtAuthGuard)
  async getCompletedPracticeExams(
    @Param('studentId', ParseIntPipe) studentId: number,
  ) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.getCompletedPracticeExams(studentId);
  }

  // üî• TH√äM: API l·∫•y k·∫øt qu·∫£ chi ti·∫øt c·ªßa m·ªôt b√†i thi
  @Get('result/:studentExamId')
  @UseGuards(JwtAuthGuard)
  async getExamResult(
    @Param('studentExamId', ParseIntPipe) studentExamId: number,
  ) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.getExamResult(studentExamId);
  }

  // üî• TH√äM: API l·∫•y k·∫øt qu·∫£ thi c·ªßa m·ªôt sinh vi√™n trong m·ªôt ƒë·ªÅ thi c·ª• th·ªÉ
  @Get(':examId/student/:studentId/result')
  @UseGuards(JwtAuthGuard)
  async getStudentExamResult(
    @Param('examId', ParseIntPipe) examId: number,
    @Param('studentId', ParseIntPipe) studentId: number,
  ) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.getStudentExamResult(examId, studentId);
  }

  // üî• TH√äM: API l·∫•y t·∫•t c·∫£ k·∫øt qu·∫£ thi c·ªßa m·ªôt ƒë·ªÅ thi (t·∫•t c·∫£ sinh vi√™n)
  @Get(':examId/all-results')
  @UseGuards(JwtAuthGuard, PermissionsGuard)
  @Permissions('exam:view')
  async getAllStudentResultsForExam(
    @Param('examId', ParseIntPipe) examId: number,
  ) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.getAllStudentResultsForExam(examId);
  }

  // üî• TH√äM: API l·∫•y t·∫•t c·∫£ ƒë·ªÅ thi ƒë√£ ho√†n th√†nh c·ªßa sinh vi√™n (c·∫£ practice v√† official)
  @Get('all-completed/:studentId')
  @UseGuards(JwtAuthGuard)
  async getAllCompletedExams(
    @Param('studentId', ParseIntPipe) studentId: number,
  ) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return await this.examService.getAllCompletedExams(studentId);
  }
}
